@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager _navMan
@inject TokenProvider TokenProvider

@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICSUNMarketplaceService _csunMarketplaceService
@inject IDialogService _dialog

<AuthorizeView>
    <Authorized>
        <MudButton OnClick="@(() => _navMan.NavigateTo("/profile"))" Style="min-width: min-content !important; padding-left: 15px; padding-right: 15px;" Class="profile-button">
            <MudAvatar Color="Color.Primary" Style="margin-right:.5em;">
                @nameToPrint[0]
            </MudAvatar>

            Hello, @nameToPrint!

        </MudButton>

        <form action="/Identity/Account/Logout?returnUrl=%2F" method="post">
            <MudButton StartIcon="@Icons.Material.Filled.Logout" IconColor="Color.Secondary" Style="min-width: min-content !important;" ButtonType="ButtonType.Submit">
                Logout
            </MudButton>
            <input name="__RequestVerificationToken" type="hidden" value="@TokenProvider.XsrfToken" />
        </form>

    </Authorized>
    <NotAuthorized>
        <MudButton StartIcon="@Icons.Material.Filled.AccountCircle" Style="min-width: min-content !important;" IconColor="Color.Secondary" OnClick="@(()=>_navMan.NavigateTo("Identity/Account/Register"))">
            Register
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Login" Style="min-width: min-content !important;" IconColor="Color.Secondary" OnClick="@(()=>_navMan.NavigateTo("Identity/Account/Login"))">
            Login
        </MudButton>
    </NotAuthorized>
</AuthorizeView>


@code {
    public string email { get; set; }
    public string userid { get; set; }
    public string nameToPrint = "name";

    public UserInformation user { get; set; }

    protected override void OnInitialized()
    {
        userid = GetUserId().Result;
        if (!String.IsNullOrWhiteSpace(userid))
        {
            user = _csunMarketplaceService.GetUserInformation(userid);
            if (!String.IsNullOrWhiteSpace(user.UserId) && !String.IsNullOrWhiteSpace(user.FirstName) && !String.IsNullOrWhiteSpace(user.LastName))
            {
                nameToPrint = user.FirstName + " " + user.LastName;
            } else
            {
                nameToPrint = email;
                // Hewwo
            }
        } else
        {
            nameToPrint = email;
            // Hewwo
        }
    }

    async Task<string> GetUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        return UserId;
    }

}