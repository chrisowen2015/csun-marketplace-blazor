@page "/profile"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Globalization
@layout StoreLayout

@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICSUNMarketplaceService _csunMarketplaceService
@inject ISnackbar Snackbar
@inject NavigationManager _navMan

<AuthorizeView>
    <Authorized>
        @if (!sellerView)
        {
            <MudPaper Elevation="5" class="page-container">
                <div class="page-content">
                    <div>
                        @*<MudAvatar Color="Color.Primary" Class="profile-image">
                            @context.User.Identity.Name.ToUpper()[0]
                            </MudAvatar>*@
                        <MudText Style="margin-top: 2.5em">
                            <h1>
                                Edit Profile
                            </h1>
                        </MudText>
                    </div>

                    <div class="grid-two">
                        <MudTextField class="elem-half" Label="First Name" T="string" @bind-Value="@User.FirstName" Variant="Variant.Filled" ReadOnly=readOnly />
                        <MudTextField class="elem-half" Label="Last Name" T="string" @bind-Value="@User.LastName" Variant="Variant.Filled" ReadOnly=readOnly />
                    </div>
                    <div class="profile-rows">
                        <MudTextField Label="Email" T="string" @bind-Value="@User.Email" Variant="Variant.Filled" ReadOnly="true" />
                    </div>
                    <div class="profile-rows">
                        <MudTextField Label="Bio" T="string" @bind-Value="@User.Bio" Variant="Variant.Filled" Lines="5" ReadOnly=readOnly />
                    </div>
                    <div class="profile-rows">
                        <MudTextField Label="Join Date" T="DateTime" @bind-Value="@User.JoinDate" Variant="Variant.Filled" ReadOnly="true" />
                    </div>
                    <div class="profile-rows">
                        @*<MudTextField Label="Rating" T="byte" @bind-Value="@User.Rating" Variant="Variant.Filled" ReadOnly="true" />*@
                        @*<MudRating ReadOnly="true" SelectedValue=@User.Rating @bind-Value="@User.Rating" />*@
                    </div>
                    <div class="profile-rows">
                        <MudTextField Label="Major" T="string" @bind-Value="@User.Major" Variant="Variant.Filled" ReadOnly=readOnly />
                    </div>
                    <div class="profile-rows">
                        <MudSelect Label="Gender" @bind-Value="@User.Gender" T="string" Variant="Variant.Filled" ReadOnly=readOnly>
                            <MudSelectItem T="string" Value="@("Male")" />
                            <MudSelectItem T="string" Value="@("Female")" />
                            <MudSelectItem T="string" Value="@("Other/Nonbinary")" />
                        </MudSelect>
                    </div>
                    <div class="two-buttons">
                        @if (readOnly)
                        {
                            <MudButton Variant="Variant.Filled" OnClick=@(() => EnableEdit()) Color="Color.Primary" Style="margin-left: 0 !important;">Start Editing</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" OnClick=@(() => UpdateUserInformation()) Color="Color.Primary">Save Changes</MudButton>
                        }

                        <MudButton Variant="Variant.Filled" OnClick=@(()=> ViewSellerProfile())>View Seller Profile</MudButton>
                    </div>
                </div>
            </MudPaper>

        }
    </Authorized>
    <NotAuthorized>
        Pls sign in!
        Who are you anyways?!?!
    </NotAuthorized>
</AuthorizeView>

@code {
    public string? userID { get; set; }
    public string? email { get; set; }
    public UserInformation User { get; set; }
    public bool readOnly = true;
    public bool sellerView = false;
    public string success { get; set; }
    CultureInfo USD = new CultureInfo("en-US");

    public List<Product> Prod { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userID = await GetUserId();

        User = _csunMarketplaceService.GetUserInformation(userID);


        if (String.IsNullOrWhiteSpace(User.UserId))
        {
            // User did not already exist

            readOnly = false;

            User.UserId = userID;
            User.Email = email;
            User.JoinDate = System.DateTime.Now;
        }
        else
        {
            Prod = _csunMarketplaceService.GetUsersProducts(userID);
        }

    }


    async Task<string> GetUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        return UserId;
    }

    public void EnableEdit()
    {
        readOnly = !readOnly;
    }

    public void ViewSellerProfile()
    {
        _navMan.NavigateTo("/view-profile/" + userID);
    }

    public void ViewProduct(int productId)
    {
        _navMan.NavigateTo("/view-listing/" + productId);
    }

    public string formatCurrency(decimal? amount)
    {
        float subtotal = (float)amount;
        return subtotal.ToString("C2", USD);
    }

    async Task UpdateUserInformation()
    {

        readOnly = true;

        success = _csunMarketplaceService.UpdateUserInformation(User);
        if (!String.IsNullOrWhiteSpace(success))
        {
            Snackbar.Add("Sucessfully Updated User Information!", Severity.Success);
            StateHasChanged();
        }
        else
        {
            // Error pop up, DB error
            Snackbar.Add("There was a problem saving your user information.", Severity.Error);
        }
    }
}

<style>
    .two-buttons {
        width: 100%;
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between;
        padding-top: .5em;
        padding-bottom: .5em;
    }

    .grid-two {
        width: 100%;
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between !important;
        align-content: space-between !important;
        padding-top: .5em;
        padding-bottom: .5em;
    }

    .elem-half {
        max-width: 48%;
    }

    .flex-it-up {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        margin-top: 2.5em;
        gap: 16px;
    }

    .profile-image {
        margin-top: 3px;
    }

    .profile-rows {
        margin-top: 1em;
        margin-bottom: 1.5em;
    }


</style>