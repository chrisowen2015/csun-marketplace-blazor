@page "/product-form"
@using csun_marketplace.data;
@using csun_marketplace.services;
@using System;

@inject ICSUNMarketplaceService _csunMarketplaceService
@inject IWebHostEnvironment env
@inject ISnackbar Snackbar

<div class="page-container">
    <div class="page-content">

        <div class="page-header-container">
            <MudText Class="form-header" Color="Color.Default">
                Create New Listing
            </MudText>
        </div>

        <div class="form-row">
            <MudTextField Label="Product Title" T="string" @bind-Value=p.Title />
        </div>
        <div class="form-row">
            @if (imgSaved)
            {
                <MudImage Src="@filePath" />
            }
            <MudText Color="Color.Surface" Class="upload-image-label">
                Upload Image
            </MudText>
            <form @onsubmit="@OnImageSubmit">
                <InputFile OnChange="OnInputFileChange" />
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Default" Variant="Variant.Filled" Size="Size.Small">
                    Upload
                </MudButton>
            </form>
        </div>

        <div class="form-row">
            <MudTextField Label="Description" T="string" @bind-Value=p.Description />
        </div>

        <div class="form-row">
            <MudTextField Label="Price" T="decimal?" @bind-Value=p.Price />
        </div>

        <div class="form-row">
            <MudTextField Label="Date Created" T="DateTime" ReadOnly="true" @bind-Value=p.DateCreated />
        </div>

        <div class="form-row">
            <MudSelect T="string" @bind-Value=p.Category>
                <MudSelectItem T="string" Value="@("Textbooks")" />
                <MudSelectItem T="string" Value="@("Electronics")" />
                <MudSelectItem T="string" Value="@("School Supplies")" />
            </MudSelect>
            @*<MudTextField Label="Category" T="string" @bind-Value=p.Category />*@
        </div>

        <div class="form-row">
            <MudTextField Label="Tags" T="string" @bind-Value=p.Tags />
        </div>

        <div class="form-row">
            <MudButton Variant="Variant.Filled" OnClick=@(()=> UpdateProduct()) Color="Color.Secondary">Submit</MudButton>
        </div>


    </div>
</div>


@code {
    public Product p = new Product();

    public string? filePath { get; set; }
    public bool imgSaved { get; set; } = false;
    int success = -2;

    protected override async Task OnInitializedAsync()
    {
        p.DateCreated = System.DateTime.Now;
    }
    IBrowserFile? selectedFile;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        this.StateHasChanged();
    }

    private async void OnImageSubmit()
    {
        try
        {
            Stream stream = selectedFile.OpenReadStream();
            /*
            * This could be easily modified to create a folder that is specific for this user, or folders based on ID, etc. to avoid clutter of the wwwroot folder.
            * Look into rewriting later and providing a path that incorporates userId or productId to create appropriate folders
            */
            
            var path = $"{env.WebRootPath}\\images\\{selectedFile.Name}";
            filePath = "/images/" + selectedFile.Name;
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
            imgSaved = true;
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
            // Write Error message to user here, user has uploaded an image that is too large
        }

    }

    async Task UpdateProduct()
    {
        p.OwnerId = 1;
        p.Available = true;
        p.ImageUrl = filePath;
        success = _csunMarketplaceService.UpdateProduct(p);
        if (success != -1)
        {
            p.ProductId = success;
            Snackbar.Add("Product Listing successfully saved to the database!.", Severity.Success);
        }
        else
        {
            // Error pop up, DB error
            Snackbar.Add("Error, Product not saved to database.", Severity.Error);
        }
    }
}

<style>
</style>