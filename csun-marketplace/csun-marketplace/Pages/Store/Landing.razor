@page "/"
@using csun_marketplace.data
@using csun_marketplace.services
@inject ICSUNMarketplaceService _csunMarketplaceService
@inject NavigationManager _navMan
<div>
    <div class="carousel-container">
        <MudCarousel TData="object" ShowBullets="false" Style="height:300px" AutoCycle="@autocycle" AutoCycleTime="TimeSpan.FromSeconds(10)">
            <MudCarouselItem Transition="transition" Color="Color.Primary">
                <div class="d-flex" style="height:100%">
                    <MudText>
                        <h1>Welcome to the Marketplace</h1>
                    </MudText>
                    <MudImage Src=@("../../images/SWOLYEP.png") />
                    <h2>uwu</h2>
                    <div class="spacer" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition" Color="@Color.Dark">
                <div class="d-flex" style="height:100%">
                    <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition" Color="@Color.Secondary">
                <div class="d-flex" style="height:100%">
                    <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Color="@Color.Primary" Size="@Size.Large" />
                </div>
            </MudCarouselItem>
        </MudCarousel>
    </div>

    <div class="feed-container">
        <div class="feed-content">

            <div class="products-container">
                @if (productsToRender != null)
                {
                    @foreach (Product p in productsToRender)
                    {
                        <MudPaper class="product-tile" Elevation="2" @onclick=@(()=>ViewProduct(p.ProductId))>
                            <div>
                                <MudImage ObjectPosition="ObjectPosition.Center" Src="@p.ImageUrl" Height="310" Width="310" />
                            </div>
                            <div class="product-tile-header-container">
                                <MudText Class="product-tile-header">
                                    @p.Title
                                </MudText>
                            </div>
                            <div>
                                <MudText Class="product-tile-price">
                                    $@p.Price
                                </MudText>
                            </div>
                            <MudTextField Value="p.Description" ReadOnly="true" Lines="4" Variant="Variant.Outlined" DisableUnderLine="true" Margin="Margin.Dense" Class="product-tile-description-container" />

                            @*<div class="product-tile-description-container">
                                <MudText Class="product-tile-description">
                                @p.Description
                                </MudText>
                                </div>*@

                        </MudPaper>
                    }
                }
            </div>
            <div class="pagination-container">
                <MudPagination Count="@maxNumberOfPages" Color="Color.Primary" SelectedChanged="@((int newPage)=>UpdateProductsOnPage(newPage))" Size="Size.Large"/>
            </div>
        </div>
    </div>
</div>



@code {
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
    public List<Product>? productsToRender { get; set; }
    public List<Product>? productList { get; set; }
    public int itemsPerPage = 15;
    public int maxNumberOfPages = 1;
    public int pageIndex = 1;

    protected override async Task OnInitializedAsync()
    {
        productList = _csunMarketplaceService.GetProductList();

        maxNumberOfPages = productList.Count() / itemsPerPage + 1;

        productsToRender = new List<Product>();
        for (int i = ((pageIndex - 1) * itemsPerPage); i < itemsPerPage * pageIndex; i++)
        {
            productsToRender.Add(productList.ElementAt(i));
        }

    }

    /*
    * Pretty proud of this actually, it will update the items on the page based on the current page and defined items per page.
     *
     */

    public void UpdateProductsOnPage(int newPage)
    {
        pageIndex = newPage;
        productsToRender.Clear();
        productsToRender = new List<Product>();
        for (int i = ((pageIndex - 1) * itemsPerPage); i < itemsPerPage * pageIndex; i++)
        {
            productsToRender.Add(productList.ElementAt(i));
        }
        StateHasChanged();
    }


    public int GetLines(string description)
    {
        int lines = 1;
        if (!String.IsNullOrWhiteSpace(description))
        {
            int accum = description.Length;
            while (accum > 33)
            {
                accum -= 33;
                lines++;
            }
        }

        return lines;
    }

    public void ViewProduct(int productId)
    {
        _navMan.NavigateTo("/view-listing/" + productId);
    }
}
<style>
.pagination-container{
    padding: 2em;
    display:flex;
    align-content:center !important;
    justify-content: center !important;
}
</style>
