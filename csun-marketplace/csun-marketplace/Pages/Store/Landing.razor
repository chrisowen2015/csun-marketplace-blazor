@page "/"
@using csun_marketplace.data
@using csun_marketplace.services
@inject ICSUNMarketplaceService _csunMarketplaceService
@inject NavigationManager _navMan
<div>
        <MudText Color="Color.Primary" Class="page-header">
            <h2>
                CSUN Marketplace Home
            </h2>
        </MudText>

    <div class="carousel-container">
        <MudCarousel TData="object" ShowBullets="false" Style="height:300px" AutoCycle="@autocycle" AutoCycleTime="TimeSpan.FromSeconds(10)">
            <MudCarouselItem Transition="transition">
                <MudImage Src="https://cdn.discordapp.com/attachments/959989259492790352/960000500412059669/carousel-placeholder.png" />
            </MudCarouselItem>
            <MudCarouselItem onclick=@(()=>_navMan.NavigateTo("textbooks/search"))>
                <div class="carousel-background-gradient">
                    <MudImage Class="carousel-background-image" Src="https://cdn.discordapp.com/attachments/959989259492790352/959989315298005033/textbooks-final.jpg" />
                    <div class="carousel-content">
                        <MudText Class="carousel-overlayed-text">
                            <h1>
                                Looking for a specific textbook?
                            </h1>
                            <h4>
                                Click Here to use our <b>Textbook Search</b> to find what you need.
                            </h4>
                        </MudText>
                    </div>
                </div>
            </MudCarouselItem>
        </MudCarousel>
    </div>

    <div class="feed-container">
        <div class="feed-content">

            <div class="products-container">
                @if (productsToRender != null)
                {
                    @foreach (Product p in productsToRender)
                    {
                        <MudPaper class="product-tile" Elevation="7" @onclick=@(()=>ViewProduct(p.ProductId))>
                            <div>
                                <MudImage ObjectPosition="ObjectPosition.Center" Src="@p.ImageUrl" Height="310" Width="310" />
                            </div>
                            <div class="product-tile-header-container">
                                <MudText Class="product-tile-header">
                                    @p.Title
                                </MudText>
                            </div>
                            <div>
                                <MudText Class="product-tile-price">
                                    $@p.Price
                                </MudText>
                            </div>
                            <MudTextField Value="p.Description" ReadOnly="true" Lines="4" Variant="Variant.Outlined" DisableUnderLine="true" Margin="Margin.Dense" Class="product-tile-description-container" />

                            @*<div class="product-tile-description-container">
                                <MudText Class="product-tile-description">
                                @p.Description
                                </MudText>
                                </div>*@

                        </MudPaper>
                    }
                }
            </div>
            <div class="pagination-container">
                <MudPagination Count="@maxNumberOfPages" Color="Color.Primary" SelectedChanged="@((int newPage)=>UpdateProductsOnPage(newPage))" Size="Size.Large" />
            </div>
        </div>
    </div>
</div>



@code {
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
    public List<Product>? productsToRender = new List<Product>();
    public List<Product>? productList = new List<Product>();
    public int itemsPerPage = 15;
    public int maxNumberOfPages = 1;
    public int pageIndex = 1;

    protected override async Task OnInitializedAsync()
    {
        productList = _csunMarketplaceService.GetProductList();

        maxNumberOfPages = productList.Count() / itemsPerPage + 1;

        productsToRender = new List<Product>();
        for (int i = ((pageIndex - 1) * itemsPerPage); i < itemsPerPage * pageIndex && i < productList.Count(); i++)
        {
            productsToRender.Add(productList.ElementAt(i));
        }

    }

    /*
    * Pretty proud of this actually, it will update the items on the page based on the current page and defined items per page.
     *
     */

    public void UpdateProductsOnPage(int newPage)
    {
        pageIndex = newPage;
        productsToRender.Clear();
        productsToRender = new List<Product>();
        for (int i = ((pageIndex - 1) * itemsPerPage); i < itemsPerPage * pageIndex && i < productList.Count(); i++)
        {
            productsToRender.Add(productList.ElementAt(i));
        }
        StateHasChanged();
    }


    public int GetLines(string description)
    {
        int lines = 1;
        if (!String.IsNullOrWhiteSpace(description))
        {
            int accum = description.Length;
            while (accum > 33)
            {
                accum -= 33;
                lines++;
            }
        }

        return lines;
    }

    public void ViewProduct(int productId)
    {
        _navMan.NavigateTo("/view-listing/" + productId);
    }
}
<style>

</style>
