@page "/new-listing"
@using System.Globalization
@using csun_marketplace.data;
@using csun_marketplace.services;
@using System;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject ICSUNMarketplaceService _csunMarketplaceService
@inject IWebHostEnvironment env
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navMan

<MudPaper class="page-container" Elevation="7">
    <div class="page-content">

        <div class="page-header-container">
            <MudText Class="form-header" Color="Color.Default">
                <h1>
                    Create New Listing
                </h1>
            </MudText>
        </div>

        <div class="form-row">
            <MudTextField Label="Listing Title" T="string" @bind-Value=p.Title Variant="Variant.Filled" />
        </div>

        <div class="form-row">
            <MudSelect Label="Category" T="string" @bind-Value=p.Category Variant="Variant.Filled" OnBlur=@(()=> CategoryChanged())>
                <MudSelectItem T="string" Value="@("Textbooks")" />
                <MudSelectItem T="string" Value="@("Electronics")" />
                <MudSelectItem T="string" Value="@("School Supplies")" />
                <MudSelectItem T="string" Value="@("Sports & Fitness")" />
                <MudSelectItem T="string" Value="@("Furniture")" />
            </MudSelect>
        </div>

        <MudText Color="Color.Surface" Class="upload-image-label">
            <h5>
                Upload Image
            </h5>
        </MudText>

        <div class="form-row">
            @if (imgSaved)
            {
                @*Copied straight from the feed, code should be refined*@

                if (p.ImageSource != null)
                {
                    string imgSource = Convert.ToBase64String(p.ImageSource);
                    try
                    {
                        p.ImageUrl = string.Format("data:image/jpg;base64,{0}", imgSource);
                    }
                    catch (FormatException f)
                    {
                        Console.WriteLine("F " + f);
                    }
                }
                <MudImage Src="@p.ImageUrl" />
            }
            <div class="img-input-div">
                <InputFile OnChange="OnInputFileChange" />
            </div>
        </div>

        <div class="form-row">
            <MudTextField Label="Description" T="string" @bind-Value=p.Description Variant="Variant.Filled" Lines="8" />
        </div>

        <div class="grid-two">
            <MudNumericField Label="Price" FullWidth="true" T="decimal?" @bind-Value=p.Price Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Style="margin-right:.5em;" />
            <MudTextField Label="Date Created" FullWidth="true" T="DateTime" ReadOnly="true" @bind-Value=p.DateCreated Variant="Variant.Filled" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CalendarMonth" Style="margin-left:.5em;" />
        </div>

        <div class="form-row">
            <MudSelect Label="Tags" T="string" @bind-Value="p.Tags" Variant="Variant.Filled" MultiSelection="true" Dense="true">
                @foreach (string tag in tagList)
                {
                    <MudSelectItem T="string" Value="@tag" OnClick="@(()=>AddTag(tag))" />
                }
            </MudSelect>
            <MudChipSet>
                @foreach (string tag in selectedTags)
                {
                    <MudChip Text="@tag" />
                }
            </MudChipSet>
        </div>

        @if (showTextbookInformation)
        {
            @*Begin TextbookInformation*@

            <MudText Style="margin:1em;">
                <h3>
                    Please provide additional information about your Textbook:
                </h3>
            </MudText>

            <div>
                <div class="form-row">
                    <MudTextField Label="Title of Textbook" @bind-Value="tinfo.Title" Variant="Variant.Filled" />
                </div>

                <div class="two-row">
                    <MudTextField Label="Author(s)" @bind-Value="tinfo.Authors" FullWidth="true" HelperText="" HelperTextOnFocus="true" Variant="Variant.Filled" />

                    <MudSelect Class="title-search-elem" T="string" @bind-Value="tinfo.Edition" Label="Edition" Variant="Variant.Filled" Style="margin-left: 1em; max-width: 300px;">
                        <MudSelectItem Value=@("1st") />
                        <MudSelectItem Value=@("2nd") />
                        <MudSelectItem Value=@("3rd") />
                        <MudSelectItem Value=@("4th") />
                        <MudSelectItem Value=@("5th") />
                        <MudSelectItem Value=@("6th") />
                        <MudSelectItem Value=@("7th") />
                        <MudSelectItem Value=@("8th") />
                        <MudSelectItem Value=@("9th") />
                        <MudSelectItem Value=@("10th") />
                        <MudSelectItem Value=@("11th") />
                        <MudSelectItem Value=@("12th") />
                        <MudSelectItem Value=@("13th") />
                    </MudSelect>

                </div>

                <div class="form-row">
                    <MudTextField Label="ISBN" @bind-Value="tinfo.Isbn" HelperText="" HelperTextOnFocus="true" Variant="Variant.Filled" />
                </div>

                <div class="two-row">
                    <MudSelect Class="textbook-course-search" @bind-Value="tinfo.Department" Label="Select the Department" Dense="true" Variant="Variant.Filled" Style="margin-right: .5em;">
                        @foreach (string department in departmentList)
                        {
                        <MudSelectItem T="string" Value=@department />
                        }
                </MudSelect>

                <MudSelect Class="textbook-course-search" @bind-Value="tinfo.Course" Label="Select the Course" Dense="true" Variant="Variant.Filled" Style="margin-left: .5em;">
                    @foreach (string course in courseList)
                        {
                        <MudSelectItem T="string" Value=@course />
                        }
                </MudSelect>



            </div>

        </div>

        }



        <div class="button-single">
            <MudButton Variant="Variant.Filled" OnClick=@(()=> UpdateProduct()) Color="Color.Primary">Submit</MudButton>
        </div>
    </div>
</MudPaper>


@code {
    public Product p = new Product();
    public byte[]? imgSource { get; set; }
    IBrowserFile? selectedFile;
    public bool imgSaved { get; set; } = false;
    int success = -2;
    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");
    public List<string> tagList = new List<string> { "Textbooks", "Electronics", "School Supplies", "Back to School", "Good Deal" };
    public List<string> selectedTags = new List<string>();
    public string userID { get; set; }

    // Begin TextbookInformation variables

    public TextbookInformation tinfo = new TextbookInformation();
    public bool showTextbookInformation = false;
    List<string> departmentList = new List<string> {"CHEM", "COMP", "ECE", "ENGL", "FIN", "GEOL", "HIST", "MATH", "PHYS", "PSY", "SCI" };
    List<string> courseList = new List<string> { "100", "108", "110", "111", "122", "150A", "150B", "182", "222", "225", "235", "256", "282", "300", "303", "310", "320", "321", "322", "324", "334", "341", "352", "355", "356", "360", "365", "366", "380", "410", "424", "430", "440", "595PD" };


    protected override async Task OnInitializedAsync()
    {
        p.DateCreated = System.DateTime.Now;
        userID = await GetUserId();
    }

    async Task<string> GetUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizedImage = await selectedFile.RequestImageFileAsync("image/jpg", 250, 250);
        selectedFile = resizedImage;
        this.StateHasChanged();
        SubmitImage();
    }

    private async void SubmitImage()
    {
        try
        {
            Stream stream = selectedFile.OpenReadStream();

            /*
            * Begin jank photo storage, bad
             */





            MemoryStream ms = new MemoryStream();

            await stream.CopyToAsync(ms);

            if (ms != null)
            {
                p.ImageSource = ms.ToArray();
                ms.Close();
            }
            p.ImageUrl = string.Format("data:image/jpg;base64,{0}", imgSource);

            stream.Close();

            imgSaved = true;
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
            // Write Error message to user here, user has uploaded an image that is too large
        }
    }

    private void AddTag(string tag)
    {
        if (!selectedTags.Contains(tag))
        {
            selectedTags.Add(tag);
            this.StateHasChanged();
            Console.WriteLine("Fired!");
        }
    }

    public void CategoryChanged()
    {
        if (p.Category != null)
        {
            if (p.Category == "Textbooks")
            {
                showTextbookInformation = true;
            } else
            {
                showTextbookInformation = false;
            }

        }
    }

    async Task UpdateProduct()
    {
        // Hello Arthur, please remove me uwu
        //p.OwnerId = p.ProductId.ToString();
        // pwetty pweeze

        // Hewo, I fix :3
        // gets logged in user's unique id and associates it with the product
        p.OwnerId = userID;

        p.Available = true;


        success = _csunMarketplaceService.UpdateProduct(p);
        if (success != -1)
        {
            p.ProductId = success;

            if (p.Category == "Textbooks")
            {
                tinfo.ProductId = p.ProductId;
                int textbookInfoSuccess = _csunMarketplaceService.UpdateTextbookInformation(tinfo);

                if (textbookInfoSuccess != -1)
                {
                    Snackbar.Add("Product Listing successfully saved to the database!.", Severity.Success);
                    _navMan.NavigateTo("/");
                }
                else
                {
                    Snackbar.Add("Error, Product not saved to database.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Product Listing successfully saved to the database!.", Severity.Success);
                _navMan.NavigateTo("/");
            }
        }
        else
        {
            // Error pop up, DB error
            Snackbar.Add("Error, Product not saved to database.", Severity.Error);
        }
    }
}

<style>
    .upload-image-label {
        margin-left: 1em;
    }

    .img-input-div {
        margin-top: 1em;
    }

    .grid-two {
        display: flex !important;
        flex-direction: row !important;
        padding-top: .5em;
        padding-bottom: .5em;
        padding-left: 1em;
        padding-right: 1em;
    }
    .two-row {
        display: flex;
        padding: 1em;
    }
</style>