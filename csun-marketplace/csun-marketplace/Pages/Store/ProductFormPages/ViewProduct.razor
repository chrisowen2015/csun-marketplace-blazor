@page "/view-listing/{productId}"
@using System.Globalization
@using csun_marketplace.data;
@using csun_marketplace.services;
@using System;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject ICSUNMarketplaceService _csunMarketplaceService
@inject IWebHostEnvironment env
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider _authenticationStateProvider
@inject CartService _cart
@inject NavigationManager _navMan

<div class="page-container">
    <div class="page-content">
        
        @if(t != null && t.TextbookInformationId != 0)
        {
            <div class="page-header-container">
            <MudText Class="form-header" Color="Color.Primary">
                <h1>
                    View Textbook
                </h1>
            </MudText>
        </div>
        } else
        {
            <div class="page-header-container">
            <MudText Class="form-header" Color="Color.Primary">
                <h1>
                    View Listing
                </h1>
            </MudText>
        </div>
        }
        

        <div class="form-row">
            <MudTextField Label="Product Title" T="string" @bind-Value=p.Title Variant="Variant.Filled" ReadOnly="true" />
        </div>

        <div class="form-row">
            <MudImage Src="@p.ImageUrl" />
        </div>

        @if (t != null && t.TextbookInformationId != 0)
        {
            <div class="grid-two">
                <MudTextField Label="Title of Textbook" FullWidth="true" T="string" @bind-Value=t.Title Variant="Variant.Filled" ReadOnly="true" Style="margin-right: 2em;" />

                <MudTextField Label="Edition" T="string" Text="@(t.Edition + " Edition")" Variant="Variant.Filled" ReadOnly="true" Style="width: 150px;"/>
            </div>

            <div class="form-row">
                <MudTextField Label="ISBN" T="string" @bind-Value=t.Isbn Variant="Variant.Filled" ReadOnly="true"/>
            </div>

            <div class="form-row">
                <MudTextField Label="Author(s)" T="string" @bind-Value=t.Authors Variant="Variant.Filled" ReadOnly="true"/>
            </div>

            <div class="grid-two">
                <MudTextField Label="Department" T="string" @bind-Value=t.Department Variant="Variant.Filled" ReadOnly="true" Class="elem-half" />

                <MudTextField Label="Course Number" T="string" @bind-Value=t.Course Variant="Variant.Filled" ReadOnly="true" Class="elem-half" />
            </div>
        }



        <div class="form-row">
            <MudTextField Label="Description" T="string" @bind-Value=p.Description Variant="Variant.Filled" Lines="8" ReadOnly="true" />
        </div>

        <div class="grid-two">
            <MudNumericField Class="elem-half" Label="Price" T="decimal?" @bind-Value=p.Price Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" ReadOnly="true" />

            <MudTextField Class="elem-half" Label="Date Created" T="DateTime" ReadOnly="true" @bind-Value=p.DateCreated Variant="Variant.Filled" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CalendarMonth" />
        </div>

        <div class="form-row">
            <MudTextField Label="Category" T="string" @bind-Value=p.Category Variant="Variant.Filled" ReadOnly="true" />
        </div>

        <div class="two-buttons form-row">
            <MudButton Variant="Variant.Filled" OnClick=@(()=> UpdateCart()) Color="Color.Primary" EndIcon="@Icons.Material.Filled.AddShoppingCart">Add To Cart</MudButton>
            <MudButton Variant="Variant.Filled" OnClick=@(()=> ViewProfile(p.OwnerId)) Color="Color.Primary" EndIcon="@Icons.Material.Filled.AccountCircle">View Seller Profile</MudButton>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string productId { get; set; }

    public Product p { get; set; }

    public TextbookInformation t { get; set; }

    protected override void OnParametersSet()
    {
        try
        {
            p = _csunMarketplaceService.GetProduct(Int32.Parse(productId));
            t = _csunMarketplaceService.GetTextbookInformation(Int32.Parse(productId));
        }
        catch
        {
            if (p == null || p.ProductId == 0)
            {
                p = new Product();
            }
            if (t == null || t.TextbookInformationId == 0)
            {
                t = new TextbookInformation();
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {

    }

    async Task<string> GetUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

    async Task UpdateCart()
    {
        if (!_cart.Contains(p))
        {
            _cart.AddToCart(p);
            Snackbar.Add("Item successfully added to Cart.", Severity.Success, config =>
            {
                _navMan.NavigateTo("/");
            });
        }
        else
        {
            Snackbar.Add("Item is already in your Cart!", Severity.Error, config =>
            {
                config.Action = "Remove";
                config.ActionColor = Color.Error;
                config.Onclick = snackbar =>
            {
                RemoveFromCart(p);
                // For some reason the cart still contains p after this. not sure why yet.
                return Task.CompletedTask;
            };
            });
        }
    }

    public void RemoveFromCart(Product p)
    {
        _cart.RemoveFromCart(p);
        if (!_cart.Contains(p))
        {
            Snackbar.Add("Item Successfully removed from your Cart.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to remove item from your cart.", Severity.Error);
        }
    }

    public void ViewProfile(string ownerId)
    {
        _navMan.NavigateTo("/view-profile/" + ownerId);
    }


}

<style>
    .upload-image-label {
        margin-left: 1em;
    }

    .img-input-div {
        margin-top: 1em;
    }

    .grid-two {
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between;
        padding-top: .5em;
        padding-bottom: .5em;
        padding-left: 1em;
        padding-right: 1em;
    }

    .elem-half {
        max-width: 48%;
    }

    .two-buttons {
        width: 100%;
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between;
        padding-top: .5em;
        padding-bottom: .5em;
    }

    .edition-row {

    }

</style>