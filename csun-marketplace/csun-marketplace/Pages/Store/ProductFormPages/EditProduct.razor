@page "/edit-listing/{productId}"
@using System.Globalization
@using csun_marketplace.data;
@using csun_marketplace.services;
@using System;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject ICSUNMarketplaceService _csunMarketplaceService
@inject IWebHostEnvironment env
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider _authenticationStateProvider

<div class="page-container">
    <div class="page-content">

        <div class="page-header-container">
            <MudText Class="form-header" Color="Color.Default">
                <h1>
                    Edit Listing
                </h1>
            </MudText>
        </div>

        <div class="form-row">
            <MudTextField Label="Product Title" T="string" @bind-Value=p.Title Variant="Variant.Filled" />
        </div>
        <div class="form-row">
            <MudImage Src="@p.ImageUrl"/>
        </div>
        
        <MudText Color="Color.Surface" Class="upload-image-label">
            <h5>
                Upload New Image
            </h5>
        </MudText>

        <div class="form-row">
            @if (imgSaved)
            {
                @*Copied straight from the feed, code should be refined*@

                if (p.ImageSource != null)
                {
                    string imgSource = Convert.ToBase64String(p.ImageSource);
                    try
                    {
                        p.ImageUrl = string.Format("data:image/jpg;base64,{0}", imgSource);
                    }
                    catch (FormatException f)
                    {
                        Console.WriteLine("F " + f);
                    }
                }
                <MudImage Src="@p.ImageUrl" />
            }
            <div class="img-input-div">
                <InputFile OnChange="OnInputFileChange" />
            </div>
        </div>

        <div class="form-row">
            <MudTextField Label="Description" T="string" @bind-Value=p.Description Variant="Variant.Filled" Lines="8" />
        </div>

        <div class="grid-two">
            <MudNumericField Class="elem-half" Label="Price" T="decimal?" @bind-Value=p.Price Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
            <MudTextField Class="elem-half" Label="Date Created" T="DateTime" ReadOnly="true" @bind-Value=p.DateCreated Variant="Variant.Filled" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CalendarMonth" />
        </div>


        <div class="form-row">
            <MudSelect Label="Category" T="string" @bind-Value=p.Category Variant="Variant.Filled" AnchorOrigin="Origin.TopCenter" Direction="Direction.Top" Dense="true">
                <MudSelectItem T="string" Value="@("Textbooks")" />
                <MudSelectItem T="string" Value="@("Electronics")" />
                <MudSelectItem T="string" Value="@("School Supplies")" />
                <MudSelectItem T="string" Value="@("Sports & Fitness")" />
                <MudSelectItem T="string" Value="@("Furniture")" />
            </MudSelect>
        </div>

        <div class="form-row">
            <MudSelect Label="Tags" T="string" @bind-Value="p.Tags" Variant="Variant.Filled" MultiSelection="true"  OnBlur="@(()=>AddTag(p.Tags))">
                @foreach (string tag in tagList)
                {
                    <MudSelectItem T="string" Value="@tag"/>
                }
            </MudSelect>
            <MudChipSet>
                @foreach(string tag in selectedTags)
                {
                    @if(!String.IsNullOrWhiteSpace(tag))
                    {
                        <MudChip Color="Color.Primary" Text="@tag" OnClose="@(()=>RemoveTag(p.Tags))"/>
                    }
                }
            </MudChipSet>
        </div>

        <div class="form-row" style="padding-top: 1em;">
            <MudButton Variant="Variant.Filled" OnClick=@(()=> UpdateProduct()) Color="Color.Primary">Submit</MudButton>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string productId { get; set; }
    public Product p { get; set; }

    public byte[]? imgSource { get; set; }
    IBrowserFile? selectedFile;
    public bool imgSaved { get; set; } = false;
    int success = -2;
    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");
    public List<string> tagList = new List<string> { "Textbooks", "Electronics", "School Supplies", "Back to School", "Good Deal" };
    public List<string> selectedTags = new List<string>();
    public string userID { get; set; }

    protected override void OnParametersSet()
    {
        try
        {
            p = _csunMarketplaceService.GetProduct(Int32.Parse(productId));
        }
        catch
        {
            p = new Product();
        }
    }

    async Task<string> GetUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizedImage = await selectedFile.RequestImageFileAsync("image/jpg", 250, 250);
        selectedFile = resizedImage;
        this.StateHasChanged();
        SubmitImage();
    }

    private async void SubmitImage()
    {
        try
        {
            Stream stream = selectedFile.OpenReadStream();

            /*
            * Begin jank photo storage, bad
             */





            MemoryStream ms = new MemoryStream();

            await stream.CopyToAsync(ms);

            if (ms != null)
            {
                p.ImageSource = ms.ToArray();
                ms.Close();
            }
            p.ImageUrl = string.Format("data:image/jpg;base64,{0}", imgSource);

            stream.Close();

            imgSaved = true;
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
            // Write Error message to user here, user has uploaded an image that is too large
        }
    }

    private void AddTag(string tag)
    {
        if(!selectedTags.Contains(tag))
        {
            selectedTags.Add(tag);
            this.StateHasChanged();
            Console.WriteLine("Fired!");
        }
    }

    private void RemoveTag(string tag)
    {
        selectedTags.Remove(tag);
        if (p.Tags != null && p.Tags.Contains(tag))
        {
            p.Tags= p.Tags.Remove(p.Tags.IndexOf(tag), p.Tags.IndexOf(tag) + tag.Length);
            // Work in Progress
            // TODO: Fix this, currently not unbinding the tags on the element. 
        }
        StateHasChanged();
    }

    async Task UpdateProduct()
    {
        // Hello Arthur, please remove me uwu
        //p.OwnerId = p.ProductId.ToString();
        // pwetty pweeze

        // Hewo, I fix :3
        // gets logged in user's unique id and associates it with the product
        p.OwnerId = userID;

        p.Available = true;
        success = _csunMarketplaceService.UpdateProduct(p);
        if (success != -1)
        {
            p.ProductId = success;
            Snackbar.Add("Product Listing successfully saved to the database!.", Severity.Success);
        }
        else
        {
            // Error pop up, DB error
            Snackbar.Add("Error, Product not saved to database.", Severity.Error);
        }
    }
}

<style>
    .upload-image-label {
        margin-left: 1em;
    }

    .img-input-div {
        margin-top: 1em;
    }

    .grid-two {
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between;
        padding-top: .5em;
        padding-bottom: .5em;
        padding-left: 1em;
        padding-right: 1em;
    }

    .elem-half {
        max-width: 48%;
    }
</style>