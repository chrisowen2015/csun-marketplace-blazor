@page "/cart"
@using System.Globalization
@using csun_marketplace.data;
@using csun_marketplace.services;
@using System;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject ICSUNMarketplaceService _csunMarketplaceService
@inject IWebHostEnvironment env
@inject ISnackbar Snackbar
@inject NavigationManager _navMan
@inject AuthenticationStateProvider _authenticationStateProvider
@inject CartService _cart

<MudPaper Class="page-container" Elevation="7">
    <div class="page-content">

        <div class="page-header-container" style="padding-left: 0em !important;">
            <MudText Class="form-header" Color="Color.Default">
                <h1>
                    My cart
                </h1>
                <h6>
                    In my cart:
                </h6>
            </MudText>
        </div>

        @if (_cart.Length() > 0)
        {
                @foreach (Product p in _cart.GetCart())
                {
                    <MudPaper Style="margin-bottom: 1em; padding: .5em;" Elevation="3" Width="100%" @onclick=@(()=>ViewProduct(p.ProductId))>
                        <MudContainer Fixed="true" Style="padding: .5em !important;">
                            <MudGrid>
                                <MudItem lg="2" xl="2">
                                    <MudImage Src="@p.ImageUrl" Height="120" Width="120" />
                                </MudItem>

                                <MudItem lg="9" xl="9" Style="display: flex; flex-direction:column; justify-content:space-between !important;">
                                    <MudText Color="Color.Primary">
                                        <h5> @p.Title </h5>
                                    </MudText>

                                    <MudText Color="Color.Secondary">
                                        Sold by @GetSellerName(p)
                                    </MudText>

                                    
                                    <div>
                                        <MudButton OnClick="@(()=> RemoveFromCart(p))" Variant="Variant.Filled" Color="Color.Surface" >
                                            Remove
                                        </MudButton>

                                        <MudButton OnClick="@(()=> SaveForLater(p))" Variant="Variant.Filled" Color="Color.Surface" Style="margin-left: 1em;">
                                            Save For Later
                                        </MudButton>
                                    </div>
                                </MudItem>

                                <MudItem lg="1" xl="1">
                                    <b class="product-price-text"> @formatCurrency(p.Price) </b>
                                </MudItem>
                            </MudGrid>
                        </MudContainer>
                    </MudPaper>
                }
        }

        <div class="two-buttons">
            <div class="keep-shopping">
                <MudButton Variant="Variant.Filled" OnClick="@(()=>_navMan.NavigateTo("/"))" Style="margin-top:1em;" Color="Color.Primary">Keep Shopping</MudButton>
            </div>

            @if (_cart.Length() > 0)
            {
                <div class="billing-continue">
                    <MudText Color="Color.Primary" Style="padding-bottom: 1em;">
                        <b>
                            Cart Total: @formatCurrency(_cart.GetTotal())
                        </b>
                    </MudText>
                    <MudButton Variant="Variant.Filled" OnClick="@(()=>_navMan.NavigateTo("/checkout"))" Color="Color.Primary">Checkout</MudButton>
                </div>
            }
        </div>

    </div>
</MudPaper>



@code {

    CultureInfo USD = new CultureInfo("en-US");
    HashSet<UserInformation> sellerInfos = new HashSet<UserInformation>();

    public string formatCurrency(decimal? amount)
    {
        float subtotal = (float)amount;
        return subtotal.ToString("C2", USD);
    }

    protected override void OnInitialized()
    {
        foreach (Product p in _cart.GetCart())
        {
            UserInformation user = _csunMarketplaceService.GetUserInformation(p.OwnerId);
            if(!sellerInfos.Contains(user))
            {
                sellerInfos.Add(_csunMarketplaceService.GetUserInformation(p.OwnerId));    
            }
        }
    }

    public void RemoveFromCart(Product p)
    {
        _cart.RemoveFromCart(p);
        Snackbar.Add("Product successfully removed from Cart.", Severity.Normal, config =>
        {
            config.Action = "Undo";
            config.ActionColor = Color.Default;
            config.ActionVariant = Variant.Filled;
            config.CloseAfterNavigation = true;
            config.Onclick = snackbar =>
            {
                _cart.UndoRemoveFromCart();
                Snackbar.Clear();
                StateHasChanged();
                return Task.CompletedTask;
            };
        });
    }

    public string GetSellerName(Product p)
    {
        UserInformation? user = null;
        try
        {
            user = sellerInfos.Where((u) => u.UserId == p.OwnerId).First();
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception " + e);
        }

        if(user != null)
        {
            return user.FirstName + " " + user.LastName;
        }
        else
        {
            return "New Seller";
        }
    }

    async Task<string> GetUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

    public void SaveForLater(Product p)
    {
        string userId = GetUserId().Result;

        SavedForLaterVM savedForLaterVM = new SavedForLaterVM
            {
                SavedForLaterId = 0,
                UserId = userId,
                ProductId = p.ProductId,
            };

        int success = _csunMarketplaceService.SaveForLater(savedForLaterVM);

        if (success != -1)
        {
            Snackbar.Add("Product successfully Saved for Later.", Severity.Normal);
            _cart.RemoveFromCart(p);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Error saving product for later.", Severity.Error);
        }
    }

    public void ViewProduct(int productId)
    {
        _navMan.NavigateTo("/view-listing/" + productId);
    }

}

<style>
    .upload-image-label {
        margin-left: 1em;
    }

    .img-input-div {
        margin-top: 1em;
    }

    .two-buttons {
        width: 100%;
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between;
        padding-top: .5em;
        padding-bottom: .5em;
    }

    .elem-half {
        max-width: 48%;
    }


    .products-container {
        display: flex !important;
        flex-direction: row !important;
        flex-flow: row wrap;
        justify-content: space-evenly;
        gap: 16px;
        padding-top: .5em;
        padding-bottom: .5em;
        padding-left: 1em;
        padding-right: 1em;
    }

    .grid-two {
        display: flex !important;
        flex-direction: row !important;
        justify-content: space-between;
        padding-top: .5em;
        padding-bottom: .5em;
        padding-left: 1em;
        padding-right: 1em;
    }

    .keep-shopping {
        float: left;
        padding-top: 24px;
    }

    .billing-continue {
        display: flex;
        flex-direction:column;
        justify-content:flex-end !important;
    }
</style>
